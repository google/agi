// Copyright (C) 2020 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

// Structs added in Vulkan 1.2 spec

class VkSemaphoreSignalInfo {
    VkStructureType    sType
    const void*        pNext
    VkSemaphore        semaphore
    u64                value
}

class VkSemaphoreWaitInfo {
    VkStructureType         sType
    const void*             pNext
    VkSemaphoreWaitFlags    flags
    u32                     semaphoreCount
    const VkSemaphore*      pSemaphores
    const u64*              pValues
}

class VkPhysicalDeviceSamplerFilterMinmaxProperties {
    VkStructureType    sType
    void*              pNext
    VkBool32           filterMinmaxSingleComponentFormats
    VkBool32           filterMinmaxImageComponentMapping
}

@internal
class PhysicalDeviceSamplerFilterMinmaxProperties {
    VkBool32           FilterMinmaxSingleComponentFormats
    VkBool32           FilterMinmaxImageComponentMapping
}

class VkSamplerReductionModeCreateInfo {
    VkStructureType           sType
    const void*               pNext
    VkSamplerReductionMode    reductionMode
}

@internal
class SamplerReductionModeCreateInfo {
    VkSamplerReductionMode    ReductionMode
}

class VkAttachmentDescription2 {
    VkStructureType                 sType
    const void*                     pNext
    VkAttachmentDescriptionFlags    flags
    VkFormat                        format
    VkSampleCountFlagBits           samples
    VkAttachmentLoadOp              loadOp
    VkAttachmentStoreOp             storeOp
    VkAttachmentLoadOp              stencilLoadOp
    VkAttachmentStoreOp             stencilStoreOp
    VkImageLayout                   initialLayout
    VkImageLayout                   finalLayout
}

class VkAttachmentReference2 {
    VkStructureType     sType
    const void*         pNext
    u32                 attachment
    VkImageLayout       layout
    VkImageAspectFlags  aspectMask
}

class VkRenderPassCreateInfo2 {
    VkStructureType                     sType
    const void*                         pNext
    VkRenderPassCreateFlags             flags
    u32                                 attachmentCount
    const VkAttachmentDescription2*     pAttachments
    u32                                 subpassCount
    const VkSubpassDescription2*        pSubpasses
    u32                                 dependencyCount
    const VkSubpassDependency2*         pDependencies
    u32                                 correlatedViewMaskCount
    const u32*                          pCorrelatedViewMasks
}

class VkSubpassBeginInfo {
    VkStructureType     sType
    const void*         pNext
    VkSubpassContents   contents
}

class VkSubpassDependency2 {
    VkStructureType         sType
    const void*             pNext
    u32                     srcSubpass
    u32                     dstSubpass
    VkPipelineStageFlags    srcStageMask
    VkPipelineStageFlags    dstStageMask
    VkAccessFlags           srcAccessMask
    VkAccessFlags           dstAccessMask
    VkDependencyFlags       dependencyFlags
    s32                     viewOffset
}

class VkSubpassDescription2 {
    VkStructureType                 sType
    const void*                     pNext
    VkSubpassDescriptionFlags       flags
    VkPipelineBindPoint             pipelineBindPoint
    u32                             viewMask
    u32                             inputAttachmentCount
    const VkAttachmentReference2*   pInputAttachments
    u32                             colorAttachmentCount
    const VkAttachmentReference2*   pColorAttachments
    const VkAttachmentReference2*   pResolveAttachments
    const VkAttachmentReference2*   pDepthStencilAttachment
    u32                             preserveAttachmentCount
    const u32*                      pPreserveAttachments
}

class VkSubpassEndInfo {
    VkStructureType     sType
    const void*         pNext
}

class VkAttachmentDescriptionStencilLayout {
    VkStructureType     sType
    void*               pNext
    VkImageLayout       stencilInitialLayout
    VkImageLayout       stencilFinalLayout
}

class VkAttachmentReferenceStencilLayout {
    VkStructureType     sType
    void*               pNext
    VkImageLayout       stencilLayout
}

class VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    VkStructureType     sType
    void*               pNext
    VkBool32            separateDepthStencilLayouts
}

@internal
class PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    VkBool32            SeparateDepthStencilLayouts
}

class VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    VkStructureType    sType
    void*              pNext
    VkBool32           uniformBufferStandardLayout
}

@internal
class PhysicalDeviceUniformBufferStandardLayoutFeatures {
  VkBool32 UniformBufferStandardLayout
}

class VkPhysicalDeviceImagelessFramebufferFeatures {
    VkStructureType     sType
    void*               pNext
    VkBool32            imagelessFramebuffer
}

@internal
class PhysicalDeviceImagelessFramebufferFeatures {
    VkBool32            ImagelessFramebuffer
}

class VkFramebufferAttachmentsCreateInfo {
    VkStructureType                         sType
    const void*                             pNext
    u32                                     attachmentImageInfoCount
    const VkFramebufferAttachmentImageInfo* pAttachmentImageInfos
}

class VkFramebufferAttachmentImageInfo {
    VkStructureType     sType
    const void*         pNext
    VkImageCreateFlags  flags
    VkImageUsageFlags   usage
    u32                 width
    u32                 height
    u32                 layerCount
    u32                 viewFormatCount
    const VkFormat*     pViewFormats
}

@internal
class FramebufferAttachmentImageInfo {
    VkImageCreateFlags  Flags
    VkImageUsageFlags   Usage
    u32                 Width
    u32                 Height
    u32                 LayerCount
    map!(u32, VkFormat) ViewFormats
}

class VkRenderPassAttachmentBeginInfo {
    VkStructureType     sType
    const void*         pNext
    u32                 attachmentCount
    const VkImageView*  pAttachments
}

class VkPhysicalDeviceDepthStencilResolveProperties {
    VkStructureType       sType
    void*                 pNext
    VkResolveModeFlags    supportedDepthResolveModes
    VkResolveModeFlags    supportedStencilResolveModes
    VkBool32              independentResolveNone
    VkBool32              independentResolve
}

@internal
class PhysicalDeviceDepthStencilResolveProperties {
    VkResolveModeFlags    SupportedDepthResolveModes
    VkResolveModeFlags    SupportedStencilResolveModes
    VkBool32              IndependentResolveNone
    VkBool32              IndependentResolve
}

class VkSubpassDescriptionDepthStencilResolve {
    VkStructureType                  sType
    const void*                      pNext
    VkResolveModeFlagBits            depthResolveMode
    VkResolveModeFlagBits            stencilResolveMode
    const VkAttachmentReference2*    pDepthStencilResolveAttachment
}

class VkDescriptorSetVariableDescriptorCountAllocateInfo {
    VkStructureType sType
    const void*     pNext
    u32             descriptorSetCount
    const u32*      pDescriptorCounts
}

class VkDescriptorSetLayoutBindingFlagsCreateInfo {
    VkStructureType                 sType
    const void*                     pNext
    u32                             bindingCount
    const VkDescriptorBindingFlags* pBindingFlags
}

@internal
class DescriptorSetLayoutBindingFlagsInfo {
    map!(u32, VkDescriptorBindingFlags) BindingFlags
}

class VkDescriptorSetVariableDescriptorCountLayoutSupport {
    VkStructureType sType
    void*           pNext
    u32             maxVariableDescriptorCount
}

class VkPhysicalDeviceDescriptorIndexingFeatures {
    VkStructureType sType
    void*           pNext
    VkBool32        shaderInputAttachmentArrayDynamicIndexing
    VkBool32        shaderUniformTexelBufferArrayDynamicIndexing
    VkBool32        shaderStorageTexelBufferArrayDynamicIndexing
    VkBool32        shaderUniformBufferArrayNonUniformIndexing
    VkBool32        shaderSampledImageArrayNonUniformIndexing
    VkBool32        shaderStorageBufferArrayNonUniformIndexing
    VkBool32        shaderStorageImageArrayNonUniformIndexing
    VkBool32        shaderInputAttachmentArrayNonUniformIndexing
    VkBool32        shaderUniformTexelBufferArrayNonUniformIndexing
    VkBool32        shaderStorageTexelBufferArrayNonUniformIndexing
    VkBool32        descriptorBindingUniformBufferUpdateAfterBind
    VkBool32        descriptorBindingSampledImageUpdateAfterBind
    VkBool32        descriptorBindingStorageImageUpdateAfterBind
    VkBool32        descriptorBindingStorageBufferUpdateAfterBind
    VkBool32        descriptorBindingUniformTexelBufferUpdateAfterBind
    VkBool32        descriptorBindingStorageTexelBufferUpdateAfterBind
    VkBool32        descriptorBindingUpdateUnusedWhilePending
    VkBool32        descriptorBindingPartiallyBound
    VkBool32        descriptorBindingVariableDescriptorCount
    VkBool32        runtimeDescriptorArray
}

@internal
class PhysicalDeviceDescriptorIndexingFeatures {
    VkBool32        ShaderInputAttachmentArrayDynamicIndexing
    VkBool32        ShaderUniformTexelBufferArrayDynamicIndexing
    VkBool32        ShaderStorageTexelBufferArrayDynamicIndexing
    VkBool32        ShaderUniformBufferArrayNonUniformIndexing
    VkBool32        ShaderSampledImageArrayNonUniformIndexing
    VkBool32        ShaderStorageBufferArrayNonUniformIndexing
    VkBool32        ShaderStorageImageArrayNonUniformIndexing
    VkBool32        ShaderInputAttachmentArrayNonUniformIndexing
    VkBool32        ShaderUniformTexelBufferArrayNonUniformIndexing
    VkBool32        ShaderStorageTexelBufferArrayNonUniformIndexing
    VkBool32        DescriptorBindingUniformBufferUpdateAfterBind
    VkBool32        DescriptorBindingSampledImageUpdateAfterBind
    VkBool32        DescriptorBindingStorageImageUpdateAfterBind
    VkBool32        DescriptorBindingStorageBufferUpdateAfterBind
    VkBool32        DescriptorBindingUniformTexelBufferUpdateAfterBind
    VkBool32        DescriptorBindingStorageTexelBufferUpdateAfterBind
    VkBool32        DescriptorBindingUpdateUnusedWhilePending
    VkBool32        DescriptorBindingPartiallyBound
    VkBool32        DescriptorBindingVariableDescriptorCount
    VkBool32        RuntimeDescriptorArray
}

class VkPhysicalDeviceDescriptorIndexingProperties {
    VkStructureType    sType
    void*              pNext
    u32                maxUpdateAfterBindDescriptorsInAllPools
    VkBool32           shaderUniformBufferArrayNonUniformIndexingNative
    VkBool32           shaderSampledImageArrayNonUniformIndexingNative
    VkBool32           shaderStorageBufferArrayNonUniformIndexingNative
    VkBool32           shaderStorageImageArrayNonUniformIndexingNative
    VkBool32           shaderInputAttachmentArrayNonUniformIndexingNative
    VkBool32           robustBufferAccessUpdateAfterBind
    VkBool32           quadDivergentImplicitLod
    u32                maxPerStageDescriptorUpdateAfterBindSamplers
    u32                maxPerStageDescriptorUpdateAfterBindUniformBuffers
    u32                maxPerStageDescriptorUpdateAfterBindStorageBuffers
    u32                maxPerStageDescriptorUpdateAfterBindSampledImages
    u32                maxPerStageDescriptorUpdateAfterBindStorageImages
    u32                maxPerStageDescriptorUpdateAfterBindInputAttachments
    u32                maxPerStageUpdateAfterBindResources
    u32                maxDescriptorSetUpdateAfterBindSamplers
    u32                maxDescriptorSetUpdateAfterBindUniformBuffers
    u32                maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
    u32                maxDescriptorSetUpdateAfterBindStorageBuffers
    u32                maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
    u32                maxDescriptorSetUpdateAfterBindSampledImages
    u32                maxDescriptorSetUpdateAfterBindStorageImages
    u32                maxDescriptorSetUpdateAfterBindInputAttachments
}

@internal
class PhysicalDeviceDescriptorIndexingProperties {
    u32                MaxUpdateAfterBindDescriptorsInAllPools
    VkBool32           ShaderUniformBufferArrayNonUniformIndexingNative
    VkBool32           ShaderSampledImageArrayNonUniformIndexingNative
    VkBool32           ShaderStorageBufferArrayNonUniformIndexingNative
    VkBool32           ShaderStorageImageArrayNonUniformIndexingNative
    VkBool32           ShaderInputAttachmentArrayNonUniformIndexingNative
    VkBool32           RobustBufferAccessUpdateAfterBind
    VkBool32           QuadDivergentImplicitLod
    u32                MaxPerStageDescriptorUpdateAfterBindSamplers
    u32                MaxPerStageDescriptorUpdateAfterBindUniformBuffers
    u32                MaxPerStageDescriptorUpdateAfterBindStorageBuffers
    u32                MaxPerStageDescriptorUpdateAfterBindSampledImages
    u32                MaxPerStageDescriptorUpdateAfterBindStorageImages
    u32                MaxPerStageDescriptorUpdateAfterBindInputAttachments
    u32                MaxPerStageUpdateAfterBindResources
    u32                MaxDescriptorSetUpdateAfterBindSamplers
    u32                MaxDescriptorSetUpdateAfterBindUniformBuffers
    u32                MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic
    u32                MaxDescriptorSetUpdateAfterBindStorageBuffers
    u32                MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic
    u32                MaxDescriptorSetUpdateAfterBindSampledImages
    u32                MaxDescriptorSetUpdateAfterBindStorageImages
    u32                MaxDescriptorSetUpdateAfterBindInputAttachments
}
