// Copyright (C) 2020 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

// Structs added in Vulkan 1.2 spec

class VkSemaphoreSignalInfo {
    VkStructureType    sType
    const void*        pNext
    VkSemaphore        semaphore
    u64                value
}

class VkSemaphoreWaitInfo {
    VkStructureType         sType
    const void*             pNext
    VkSemaphoreWaitFlags    flags
    u32                     semaphoreCount
    const VkSemaphore*      pSemaphores
    const u64*              pValues
}

class VkPhysicalDeviceSamplerFilterMinmaxProperties {
    VkStructureType    sType
    void*              pNext
    VkBool32           filterMinmaxSingleComponentFormats
    VkBool32           filterMinmaxImageComponentMapping
}

@internal
class PhysicalDeviceSamplerFilterMinmaxProperties {
    VkBool32           FilterMinmaxSingleComponentFormats
    VkBool32           FilterMinmaxImageComponentMapping
}

class VkSamplerReductionModeCreateInfo {
    VkStructureType           sType
    const void*               pNext
    VkSamplerReductionMode    reductionMode
}

@internal
class SamplerReductionModeCreateInfo {
    VkSamplerReductionMode    ReductionMode
}

class VkAttachmentDescription2 {
    VkStructureType                 sType
    const void*                     pNext
    VkAttachmentDescriptionFlags    flags
    VkFormat                        format
    VkSampleCountFlagBits           samples
    VkAttachmentLoadOp              loadOp
    VkAttachmentStoreOp             storeOp
    VkAttachmentLoadOp              stencilLoadOp
    VkAttachmentStoreOp             stencilStoreOp
    VkImageLayout                   initialLayout
    VkImageLayout                   finalLayout
}

class VkAttachmentReference2 {
    VkStructureType     sType
    const void*         pNext
    u32                 attachment
    VkImageLayout       layout
    VkImageAspectFlags  aspectMask
}

class VkRenderPassCreateInfo2 {
    VkStructureType                     sType
    const void*                         pNext
    VkRenderPassCreateFlags             flags
    u32                                 attachmentCount
    const VkAttachmentDescription2*     pAttachments
    u32                                 subpassCount
    const VkSubpassDescription2*        pSubpasses
    u32                                 dependencyCount
    const VkSubpassDependency2*         pDependencies
    u32                                 correlatedViewMaskCount
    const u32*                          pCorrelatedViewMasks
}

class VkSubpassBeginInfo {
    VkStructureType     sType
    const void*         pNext
    VkSubpassContents   contents
}

class VkSubpassDependency2 {
    VkStructureType         sType
    const void*             pNext
    u32                     srcSubpass
    u32                     dstSubpass
    VkPipelineStageFlags    srcStageMask
    VkPipelineStageFlags    dstStageMask
    VkAccessFlags           srcAccessMask
    VkAccessFlags           dstAccessMask
    VkDependencyFlags       dependencyFlags
    s32                     viewOffset
}

class VkSubpassDescription2 {
    VkStructureType                 sType
    const void*                     pNext
    VkSubpassDescriptionFlags       flags
    VkPipelineBindPoint             pipelineBindPoint
    u32                             viewMask
    u32                             inputAttachmentCount
    const VkAttachmentReference2*   pInputAttachments
    u32                             colorAttachmentCount
    const VkAttachmentReference2*   pColorAttachments
    const VkAttachmentReference2*   pResolveAttachments
    const VkAttachmentReference2*   pDepthStencilAttachment
    u32                             preserveAttachmentCount
    const u32*                      pPreserveAttachments
}

class VkSubpassEndInfo {
    VkStructureType     sType
    const void*         pNext
}
