// Copyright (C) 2020 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

/*
*
* Melih TODO: Everytime vkGetBufferDeviceAddressKHR called, we must ensure that
* in replay we use that same address. This implemetation will likely to
* require preprocessing and a transform and postponed for now.
*
*/

@extension("VK_KHR_buffer_device_address") define VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION 1
@extension("VK_KHR_buffer_device_address") define VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME "VK_KHR_buffer_device_address"

// Do not repeat the KHR structs as this extensions is alrady in core
// Use the core structs as spec states.

@extension("VK_KHR_buffer_device_address")
@indirect("VkDevice")
cmd VkDeviceAddress vkGetBufferDeviceAddressKHR(
    VkDevice                            device,
    const VkBufferDeviceAddressInfo*    pInfo) {
    buffer := preGetBufferDeviceAddress(device, pInfo)
    deviceAddress := ?
    postGetBufferDeviceAddress(buffer, deviceAddress)
    return deviceAddress
}

@extension("VK_KHR_buffer_device_address")
@indirect("VkDevice")
cmd u64 vkGetBufferOpaqueCaptureAddressKHR(
    VkDevice                            device,
    const VkBufferDeviceAddressInfo*    pInfo) {
    buffer := preGetBufferOpaqueCaptureAddress(device, pInfo)
    bufferOpaqueCaptureAddress := ?
    postGetBufferOpaqueCaptureAddress(buffer, bufferOpaqueCaptureAddress)
    return bufferOpaqueCaptureAddress
}

@extension("VK_KHR_buffer_device_address")
@indirect("VkDevice")
cmd u64 vkGetDeviceMemoryOpaqueCaptureAddressKHR (
    VkDevice                                        device,
    const VkDeviceMemoryOpaqueCaptureAddressInfo*   pInfo) {
    memory := preGetDeviceMemoryOpaqueCaptureAddress(device, pInfo)
    deviceMemoryOpaqueCaptureAddress := ?
    postGetDeviceMemoryOpaqueCaptureAddress(memory, deviceMemoryOpaqueCaptureAddress)
    return deviceMemoryOpaqueCaptureAddress
}
