// Copyright (C) 2021 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

///////////
// Enums //
///////////

// Updated in api/enums.api

/////////////
// Structs //
/////////////

@platform("VK_USE_PLATFORM_ANDROID_KHR")
@extension("VK_ANDROID_external_memory_android_hardware_buffer")
@forwarddecl
class AHardwareBuffer {}

@extension("VK_ANDROID_external_memory_android_hardware_buffer")
class VkAndroidHardwareBufferPropertiesANDROID {
  VkStructureType    sType
  const void*        pNext
  VkDeviceSize       allocationSize
  u32                memoryTypeBits
}

@extension("VK_ANDROID_external_memory_android_hardware_buffer")
class VkMemoryGetAndroidHardwareBufferInfoANDROID {
  VkStructureType    sType
  const void*        pNext
  VkDeviceMemory     memory
}

@extension("VK_ANDROID_external_memory_android_hardware_buffer")
class VkAndroidHardwareBufferFormatPropertiesANDROID {
  VkStructureType                  sType
  const void*                      pNext
  VkFormat                         format
  u64                              externalFormat
  VkFormatFeatureFlags             formatFeatures
  VkComponentMapping               samplerYcbcrConversionComponents
  VkSamplerYcbcrModelConversion    suggestedYcbcrModel
  VkSamplerYcbcrRange              suggestedYcbcrRange
  VkChromaLocation                 suggestedXChromaOffset
  VkChromaLocation                 suggestedYChromaOffset
}

@extension("VK_ANDROID_external_memory_android_hardware_buffer")
class VkExternalFormatANDROID {
  VkStructureType    sType
  const void*        pNext
  u64                externalFormat
}

@extension("VK_ANDROID_external_memory_android_hardware_buffer")
class VkAndroidHardwareBufferUsageANDROID {
  VkStructureType    sType
  const void*        pNext
  u64                androidHardwareBufferUsage
}

@extension("VK_ANDROID_external_memory_android_hardware_buffer")
class VkImportAndroidHardwareBufferInfoANDROID {
  VkStructureType     sType
  const void*         pNext
  AHardwareBuffer*    buffer
}

//////////////
// Commands //
//////////////

@platform("VK_USE_PLATFORM_ANDROID_KHR")
@extension("VK_ANDROID_external_memory_android_hardware_buffer")
@indirect("VkDevice")
@no_replay
cmd VkResult vkGetAndroidHardwareBufferPropertiesANDROID(
    VkDevice                                    device,
    const AHardwareBuffer*                      buffer,
    VkAndroidHardwareBufferPropertiesANDROID*   pProperties) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if buffer == null { vkErrorNullPointer("AHardwareBuffer") }
  if pProperties == null { vkErrorNullPointer("VkAndroidHardwareBufferPropertiesANDROID") }

  props := pProperties[0]
  if props.pNext != null {
    numPNext := numberOfPNext(as!const void*(props.pNext))
    next := MutableVoidPtr(as!void*(props.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0]
      switch sType {
        case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: {
          _ = as!VkAndroidHardwareBufferFormatPropertiesANDROID*(next.Ptr)[0]
        }
      }
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }

  fence

  pProperties[0] = ?
  newProps := pProperties[0]
  if newProps.pNext != null {
    numPNext := numberOfPNext(as!const void*(newProps.pNext))
    next := MutableVoidPtr(as!void*(newProps.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0]
      switch sType {
        case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: {
          write(as!VkAndroidHardwareBufferFormatPropertiesANDROID*(next.Ptr)[0:1])
        }
      }
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0].PNext
    }
  }

  return ?
}

@platform("VK_USE_PLATFORM_ANDROID_KHR")
@extension("VK_ANDROID_external_memory_android_hardware_buffer")
@indirect("VkDevice")
@no_replay
cmd VkResult vkGetMemoryAndroidHardwareBufferANDROID(
    VkDevice                                           device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    AHardwareBuffer**                                  pBuffer) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pInfo == null { vkErrorNullPointer("VkMemoryGetAndroidHardwareBufferInfoANDROID") }
  if pBuffer == null { vkErrorNullPointer("AHardwareBuffer") }

  pBuffer[0] = ?
  return ?
}
