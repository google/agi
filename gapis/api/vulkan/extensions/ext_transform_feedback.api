// Copyright (C) 2021 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

///////////////
// Constants //
///////////////

@extension("VK_EXT_transform_feedback") define VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION   1
@extension("VK_EXT_transform_feedback") define VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME "VK_EXT_transform_feedback"

/////////////
// Flags //
/////////////

// Reserved for the Future Use
type VkFlags VkPipelineRasterizationStateStreamCreateFlagsEXT

/////////////
// Structs //
/////////////

@extension("VK_EXT_transform_feedback")
class VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    VkStructureType  sType
    void*            pNext
    VkBool32         transformFeedback
    VkBool32         geometryStreams
}

@extension("VK_EXT_transform_feedback")
class VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    VkStructureType sType
    void*           pNext
    u32             maxTransformFeedbackStreams
    u32             maxTransformFeedbackBuffers
    VkDeviceSize    maxTransformFeedbackBufferSize
    u32             maxTransformFeedbackStreamDataSize
    u32             maxTransformFeedbackBufferDataSize
    u32             maxTransformFeedbackBufferDataStride
    VkBool32        transformFeedbackQueries
    VkBool32        transformFeedbackStreamsLinesTriangles
    VkBool32        transformFeedbackRasterizationStreamSelect
    VkBool32        transformFeedbackDraw
}

@extension("VK_EXT_transform_feedback")
class VkPipelineRasterizationStateStreamCreateInfoEXT {
    VkStructureType                                     sType
    const void*                                         pNext
    VkPipelineRasterizationStateStreamCreateFlagsEXT    flags
    u32                                                 rasterizationStream
}

@internal
class PhysicalDeviceTransformFeedbackFeaturesEXT {
    VkBool32    TransformFeedback
    VkBool32    GeometryStreams
}

@internal
class PhysicalDeviceTransformFeedbackPropertiesEXT {
    u32             MaxTransformFeedbackStreams
    u32             MaxTransformFeedbackBuffers
    VkDeviceSize    MaxTransformFeedbackBufferSize
    u32             MaxTransformFeedbackStreamDataSize
    u32             MaxTransformFeedbackBufferDataSize
    u32             MaxTransformFeedbackBufferDataStride
    VkBool32        TransformFeedbackQueries
    VkBool32        TransformFeedbackStreamsLinesTriangles
    VkBool32        TransformFeedbackRasterizationStreamSelect
    VkBool32        TransformFeedbackDraw
}

@internal
class PipelineRasterizationStateStreamCreateInfoEXT {
    VkPipelineRasterizationStateStreamCreateFlagsEXT    Flags
    u32                                                 RasterizationStream
}

//////////////
// Commands //
//////////////

@internal class vkCmdBindTransformFeedbackBuffersEXTArgs {
    u32                     FirstBinding
    u32                     BindingCount
    map!(u32, VkBuffer)     Buffers
    map!(u32, VkDeviceSize) Offsets
    map!(u32, VkDeviceSize) Sizes
}

sub void dovkCmdBindTransformFeedbackBuffersEXT(ref!vkCmdBindTransformFeedbackBuffersEXTArgs args) {
    n := len(args.Buffers)
    for i in (0 .. n) {
        v := args.Buffers[as!u32(i)]
        if !(v in Buffers) {
            vkErrorInvalidBuffer(v)
        } else {
            ldi := lastDrawInfo()
            if (as!u32(i) in args.Sizes) && (args.Sizes[as!u32(i)]) != VK_WHOLE_SIZE {
                ldi.BoundTransformFeedbackBuffers[as!u32(i) + args.FirstBinding] = BoundBuffer(
                Buffers[v],
                args.Offsets[as!u32(i)],
                args.Sizes[as!u32(i)])
            } else {
                ldi.BoundTransformFeedbackBuffers[as!u32(i) + args.FirstBinding] = BoundBuffer(
                Buffers[v],
                args.Offsets[as!u32(i)],
                Buffers[v].Info.Size - args.Offsets[as!u32(i)])
            }
            Buffers[v].LastBoundQueue = LastBoundQueue
        }
    }
}

@extension("VK_EXT_transform_feedback")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdBindTransformFeedbackBuffersEXT(
    VkCommandBuffer     commandBuffer,
    u32                 firstBinding,
    u32                 bindingCount,
    const VkBuffer*     pBuffers,
    const VkDeviceSize* pOffsets,
    const VkDeviceSize* pSizes) {
    if !(commandBuffer in CommandBuffers) {
        vkErrorInvalidCommandBuffer(commandBuffer)
    } else {
        args := new!vkCmdBindTransformFeedbackBuffersEXTArgs(
            FirstBinding:  firstBinding,
            BindingCount:  bindingCount
        )
        buffers := pBuffers[0:bindingCount]
        offsets := pOffsets[0:bindingCount]

        for i in (0 .. bindingCount) {
            if !(buffers[i] in Buffers) { vkErrorInvalidBuffer(buffers[i]) }
            args.Buffers[i] = buffers[i]
            args.Offsets[i] = offsets[i]
        }

        // pSizes is optional
        if pSizes != null {
            sizes := pSizes[0:bindingCount]
            for i in (0 .. bindingCount) {
                args.Sizes[i] = sizes[i]
            }
        }

        cmdBuf := CommandBuffers[commandBuffer]
        mapPos := as!u32(len(cmdBuf.BufferCommands.vkCmdBindTransformFeedbackBuffersEXT))
        cmdBuf.BufferCommands.vkCmdBindTransformFeedbackBuffersEXT[mapPos] = args

        AddCommand(commandBuffer, cmd_vkCmdBindTransformFeedbackBuffersEXT, mapPos)
    }
}

@internal class vkCmdBeginTransformFeedbackEXTArgs {
    u32                     FirstCounterBuffer
    u32                     CounterBufferCount
    map!(u32, VkBuffer)     CounterBuffers
    map!(u32, VkDeviceSize) CounterBufferOffsets
}

sub void dovkCmdBeginTransformFeedbackEXT(ref!vkCmdBeginTransformFeedbackEXTArgs args) {
    ldi := lastDrawInfo()
    transformFeedbackBuffer := ldi.BoundTransformFeedbackBuffers[args.FirstCounterBuffer].Buffer
    readCoherentMemoryInBuffer(transformFeedbackBuffer)
    for i in (0 .. args.CounterBufferCount) {
        readMemoryInBuffer(Buffers[args.CounterBuffers[i]], args.CounterBufferOffsets[i], 4)
    }
}

@extension("VK_EXT_transform_feedback")
@indirect("VkCommandBuffer", "VkDevice")
@begin_end_transform_feedback
cmd void vkCmdBeginTransformFeedbackEXT(
    VkCommandBuffer     commandBuffer,
    u32                 firstCounterBuffer,
    u32                 counterBufferCount,
    const VkBuffer*     pCounterBuffers,
    const VkDeviceSize* pCounterBufferOffsets) {
    if !(commandBuffer in CommandBuffers) {
        vkErrorInvalidCommandBuffer(commandBuffer)
    } else {
        args := new!vkCmdBeginTransformFeedbackEXTArgs(
            FirstCounterBuffer:  firstCounterBuffer,
            CounterBufferCount:  counterBufferCount
        )

        if pCounterBuffers != null {
            counterBuffers := pCounterBuffers[0:counterBufferCount]
            for i in (0 .. counterBufferCount) {
                if !(counterBuffers[i] in Buffers) { vkErrorInvalidBuffer(counterBuffers[i]) }
                args.CounterBuffers[i] = counterBuffers[i]
            }
        }

        if pCounterBufferOffsets != null {
            counterBufferOffsets := pCounterBufferOffsets[0:counterBufferCount]
            for i in (0 .. counterBufferCount) {
                args.CounterBufferOffsets[i] = counterBufferOffsets[i]
            }
        }

        cmdBuf := CommandBuffers[commandBuffer]
        mapPos := as!u32(len(cmdBuf.BufferCommands.vkCmdBeginTransformFeedbackEXT))
        cmdBuf.BufferCommands.vkCmdBeginTransformFeedbackEXT[mapPos] = args

        AddCommand(commandBuffer, cmd_vkCmdBeginTransformFeedbackEXT, mapPos)
    }
}

@internal class vkCmdEndTransformFeedbackEXTArgs {
    u32                     FirstCounterBuffer
    u32                     CounterBufferCount
    map!(u32, VkBuffer)     CounterBuffers
    map!(u32, VkDeviceSize) CounterBufferOffsets
}

sub void dovkCmdEndTransformFeedbackEXT(ref!vkCmdEndTransformFeedbackEXTArgs args) {
    ldi := lastDrawInfo()
    transformFeedbackBuffer := ldi.BoundTransformFeedbackBuffers[args.FirstCounterBuffer].Buffer
    readCoherentMemoryInBuffer(transformFeedbackBuffer)
    for i in (0 .. args.CounterBufferCount) {
        readMemoryInBuffer(Buffers[args.CounterBuffers[i]], args.CounterBufferOffsets[i], 4)
    }
}

@extension("VK_EXT_transform_feedback")
@indirect("VkCommandBuffer", "VkDevice")
@begin_end_transform_feedback
cmd void vkCmdEndTransformFeedbackEXT(
    VkCommandBuffer     commandBuffer,
    u32                 firstCounterBuffer,
    u32                 counterBufferCount,
    const VkBuffer*     pCounterBuffers,
    const VkDeviceSize* pCounterBufferOffsets) {
    if !(commandBuffer in CommandBuffers) {
        vkErrorInvalidCommandBuffer(commandBuffer)
    } else {
        args := new!vkCmdEndTransformFeedbackEXTArgs(
            FirstCounterBuffer:  firstCounterBuffer,
            CounterBufferCount:  counterBufferCount
        )

        if pCounterBuffers != null {
            counterBuffers := pCounterBuffers[0:counterBufferCount]
            for i in (0 .. counterBufferCount) {
                if !(counterBuffers[i] in Buffers) { vkErrorInvalidBuffer(counterBuffers[i]) }
                args.CounterBuffers[i] = counterBuffers[i]
            }
        }

        if pCounterBufferOffsets != null {
            counterBufferOffsets := pCounterBufferOffsets[0:counterBufferCount]
            for i in (0 .. counterBufferCount) {
                args.CounterBufferOffsets[i] = counterBufferOffsets[i]
            }
        }

        cmdBuf := CommandBuffers[commandBuffer]
        mapPos := as!u32(len(cmdBuf.BufferCommands.vkCmdEndTransformFeedbackEXT))
        cmdBuf.BufferCommands.vkCmdEndTransformFeedbackEXT[mapPos] = args

        AddCommand(commandBuffer, cmd_vkCmdEndTransformFeedbackEXT, mapPos)
    }
}

@internal class vkCmdBeginQueryIndexedEXTArgs {
    VkQueryPool         QueryPool
    u32                 Query
    VkQueryControlFlags Flags
    u32                 Index
}

sub void dovkCmdBeginQueryIndexedEXT(ref!vkCmdBeginQueryIndexedEXTArgs args) {
    if !(args.QueryPool in QueryPools) {
        vkErrorInvalidQueryPool(args.QueryPool)
    }

    pool := QueryPools[args.QueryPool]
    if pool == null {
        vkErrorNullPointer("QueryPoolObject")
    }

    if !(args.Query < pool.QueryCount) {
        vkErrorQueryOutOfRange(args.QueryPool, args.Query)
    }

    if pool.Status[args.Query] != QUERY_STATUS_INACTIVE {
        vkErrorQueryNotInactive(args.QueryPool, args.Query)
    }

    pool.Status[args.Query] = QUERY_STATUS_ACTIVE
    pool.LastBoundQueue = LastBoundQueue
}

@extension("VK_EXT_transform_feedback")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdBeginQueryIndexedEXT(
    VkCommandBuffer     commandBuffer,
    VkQueryPool         queryPool,
    u32                 query,
    VkQueryControlFlags flags,
    u32                 index) {
    if !(commandBuffer in CommandBuffers) {
        vkErrorInvalidCommandBuffer(commandBuffer)
    } else {
        if !(queryPool in QueryPools) { vkErrorInvalidQueryPool(queryPool) }
        args := new!vkCmdBeginQueryIndexedEXTArgs(queryPool, query, flags, index)

        cmdBuf := CommandBuffers[commandBuffer]
        mapPos := as!u32(len(cmdBuf.BufferCommands.vkCmdBeginQueryIndexedEXT))
        cmdBuf.BufferCommands.vkCmdBeginQueryIndexedEXT[mapPos] = args

        AddCommand(commandBuffer, cmd_vkCmdBeginQueryIndexedEXT, mapPos)
    }
}

@internal class vkCmdEndQueryIndexedEXTArgs {
    VkQueryPool QueryPool
    u32         Query
    u32         Index
}

sub void dovkCmdEndQueryIndexedEXT(ref!vkCmdEndQueryIndexedEXTArgs args) {
    if !(args.QueryPool in QueryPools) {
        vkErrorInvalidQueryPool(args.QueryPool)
    }

    pool := QueryPools[args.QueryPool]
    if pool == null {
        vkErrorNullPointer("QueryPoolObject")
    }

    if !(args.Query < pool.QueryCount) {
        vkErrorQueryOutOfRange(args.QueryPool, args.Query)
    }

    if pool.Status[args.Query] != QUERY_STATUS_ACTIVE {
        vkErrorQueryNotActive(args.QueryPool, args.Query)
    }

    pool.Status[args.Query] = QUERY_STATUS_COMPLETE
    pool.LastBoundQueue = LastBoundQueue
}

@extension("VK_EXT_transform_feedback")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdEndQueryIndexedEXT(
    VkCommandBuffer commandBuffer,
    VkQueryPool     queryPool,
    u32             query,
    u32             index) {
    if !(commandBuffer in CommandBuffers) {
        vkErrorInvalidCommandBuffer(commandBuffer)
    } else {
        if !(queryPool in QueryPools) { vkErrorInvalidQueryPool(queryPool) }
        args := new!vkCmdEndQueryIndexedEXTArgs(queryPool, query, index)

        cmdBuf := CommandBuffers[commandBuffer]
        mapPos := as!u32(len(cmdBuf.BufferCommands.vkCmdEndQueryIndexedEXT))
        cmdBuf.BufferCommands.vkCmdEndQueryIndexedEXT[mapPos] = args

        AddCommand(commandBuffer, cmd_vkCmdEndQueryIndexedEXT, mapPos)
    }
}

@internal class vkCmdDrawIndirectByteCountEXTArgs {
    u32             InstanceCount,
    u32             FirstInstance,
    VkBuffer        CounterBuffer,
    VkDeviceSize    CounterBufferOffset,
    u32             CounterOffset,
    u32             VertexStride
}

sub void dovkCmdDrawIndirectByteCountEXT(ref!vkCmdDrawIndirectByteCountEXTArgs args) {
    if args.InstanceCount > 0 {
        useRenderPass()
        readWriteMemoryInBoundGraphicsDescriptorSets()
        readMemoryInBuffer(Buffers[args.CounterBuffer], args.CounterBufferOffset, 4)
        readCoherentMemoryInBuffer(Buffers[args.CounterBuffer])
        // Read through all the vertex buffers, as we cannot assume the buffer given to indirect draw is host
        readMemoryInCurrentPipelineBoundVertexBuffers(0xFFFFFFFF, 0xFFFFFFFF, 0, 0)
        clearLastDrawInfoDrawCommandParameters()
        ldi := lastDrawInfo()
        ldi.CommandParameters.DrawIndirectByteCountEXT = args
    }
}

@executed_draw
@extension("VK_EXT_transform_feedback")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdDrawIndirectByteCountEXT(
    VkCommandBuffer commandBuffer,
    u32             instanceCount,
    u32             firstInstance,
    VkBuffer        counterBuffer,
    VkDeviceSize    counterBufferOffset,
    u32             counterOffset,
    u32             vertexStride) {
    if !(commandBuffer in CommandBuffers) {
        vkErrorInvalidCommandBuffer(commandBuffer)
    } else {
        if !(counterBuffer in Buffers) { vkErrorInvalidBuffer(counterBuffer) }
        args := new!vkCmdDrawIndirectByteCountEXTArgs(
            instanceCount,
            firstInstance,
            counterBuffer,
            counterBufferOffset,
            counterOffset,
            vertexStride,
        )

        cmdBuf := CommandBuffers[commandBuffer]

        mapPos := as!u32(len(cmdBuf.BufferCommands.vkCmdDrawIndirectByteCountEXT))
        cmdBuf.BufferCommands.vkCmdDrawIndirectByteCountEXT[mapPos] = args

        AddCommand(commandBuffer, cmd_vkCmdDrawIndirectByteCountEXT, mapPos)
    }
}
