// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package resolve;
option go_package = "github.com/google/gapid/gapis/resolve";

import "core/image/image.proto";
import "gapis/api/service.proto";
import "gapis/service/path/path.proto";
import "gapis/service/service.proto";

message CommandTreeResolvable {
  path.CommandTree path = 1;
  path.ResolveConfig config = 2;
}

message FollowResolvable {
  path.Any path = 1;
  path.ResolveConfig config = 2;
}

message FramebufferAttachmentResolvable {
  path.Command after = 1;
  uint32 attachment = 2;
  path.RenderSettings settings = 3;
  path.UsageHints hints = 4;
  path.ResolveConfig config = 5;
}

message FramebufferAttachmentsResolvable {
  path.FramebufferAttachments path = 1;
  path.ResolveConfig config = 2;
}

message FramebufferChangesResolvable {
  path.Capture capture = 1;
  path.ResolveConfig config = 2;
}

message FramebufferAttachmentBytesResolvable {
  path.Command after = 1;
  uint32 width = 2;
  uint32 height = 3;
  api.FramebufferAttachmentType attachment = 4;
  path.RenderSettings settings = 5;
  path.UsageHints hints = 6;
  image.Format image_format = 7;
  uint32 framebuffer_index = 8;
  path.ResolveConfig config = 9;
}

// Get resolves the object, value or memory at Path.
message GetResolvable {
  path.Any path = 1;
  path.ResolveConfig config = 2;
}

message IndexLimitsResolvable {
  uint64 index_size = 1;
  uint64 count = 2;
  bool little_endian = 3;
  path.Blob data = 4;
}

message ReportResolvable {
  path.Report path = 1;
  path.ResolveConfig config = 2;
}

message ResourcesResolvable {
  path.Capture capture = 1;
  path.ResolveConfig config = 2;
}

message AllResourceDataResolvable {
  path.Command after = 1;
  path.ResolveConfig config = 2;
  path.ResourceType type = 3;
}

message GlobalStateResolvable {
  path.GlobalState path = 1;
  path.ResolveConfig config = 2;
}

message StateResolvable {
  path.State path = 1;
  path.ResolveConfig config = 2;
}

message SynchronizationResolvable {
  path.Capture capture = 1;
}

message StateTreeResolvable {
  path.State path = 1;
  int32 array_group_size = 2;
  path.ResolveConfig config = 3;
}

message SetResolvable {
  path.Any path = 1;
  service.Value value = 2;
  path.ResolveConfig config = 3;
}

message FramebufferObservationResolvable {
  path.FramebufferObservation path = 1;
  path.ResolveConfig config = 2;
}

message DeleteResolvable {
  path.Any path = 1;
  path.ResolveConfig config = 2;
}
