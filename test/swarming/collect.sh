#!/bin/bash

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script collects the results of a Swarming task for a given test.

set -x
set -e

if [ -z "${LUCI_CLIENT_ROOT}" ] ; then
  echo "Error: empty environment variable: LUCI_CLIENT_ROOT"
  exit 1
fi

SWARMING_TEST_JSON=$1
if [ ! -f "${SWARMING_TEST_JSON}" ] ; then
  echo "Error: missing or invalid argument (should be the Swarming test json file generated by trigger.sh)."
  exit 1
fi
SWARMING_SUMMARY=summary_`basename ${SWARMING_TEST_JSON}`

SWARMING_SERVER=https://chrome-swarming.appspot.com

# The "swarming.py collect" call returns the task's exit code, which is non-zero
# if the task has expired (it was never scheduled). Allow for non-zero return
# code, and manually check the task status afterward
set +e
${LUCI_CLIENT_ROOT}/swarming.py collect ${SWARMING_AUTH_FLAG} --swarming ${SWARMING_SERVER} --json ${SWARMING_TEST_JSON} --task-summary-json ${SWARMING_SUMMARY}
SWARMING_COLLECT_EXIT_CODE=$?
set -e

# Ignore failures that are not due to the test itself
if [ "${SWARMING_COLLECT_EXIT_CODE}" != "0" ] ; then
  if grep '"state": "EXPIRED"' ${SUMMARY} > /dev/null ; then
    echo "Swarming test was never scheduled, ignoring it"
  elif grep '"internal_failure": true' ${SUMMARY} > /dev/null ; then
    echo "Swarming internal failure, ignore the swarming test"
  else
    echo "Swarming test failed"
    exit 1
  fi
fi
