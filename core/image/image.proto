// Copyright (C) 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "core/stream/stream.proto";

package image;
option java_package = "com.google.gapid.proto.image";
option java_outer_classname = "Image";
option go_package = "github.com/google/gapid/core/image";

// ID is a 20-byte identifier.
message ID {
  bytes data = 1;
}

// Data is a one, two or three dimensional image.
message Data {
  // The format of the image.
  Format format = 1;
  // The width of the image in pixels.
  uint32 width = 2;
  // The height of the image in pixels. Must be 1 for 1D images.
  uint32 height = 3;
  // The depth of the image in pixels. Must be 1 for 1D or 2D images.
  uint32 depth = 4;
  // The pixel data.
  bytes bytes = 5;
}

// Info describes a one, two or three dimensional image.
message Info {
  // The format of the image.
  Format format = 1;
  // The width of the image in pixels.
  uint32 width = 2;
  // The height of the image in pixels. Must be 1 for 1D images.
  uint32 height = 3;
  // The depth of the image in pixels. Must be 1 for 1D or 2D images.
  uint32 depth = 4;
  // The identifier of the image data as bytes.
  ID bytes = 5;
  // The computed size of the image.
  uint32 computed_size = 6;
}

message Format {
  string name = 1;
  oneof format {
    FmtPNG png = 2;
    FmtUncompressed uncompressed = 3;
    FmtATC_RGB_AMD atc_rgb_amd = 4;
    FmtATC_RGBA_EXPLICIT_ALPHA_AMD atc_rgba_explicit_alpha_amd = 5;
    FmtATC_RGBA_INTERPOLATED_ALPHA_AMD atc_rgba_interpolated_alpha_amd = 6;
    FmtETC1_RGB_U8_NORM etc1_rgb_u8_norm = 7;
    FmtETC2 etc2 = 8;
    FmtS3_DXT1_RGB s3_dxt1_rgb = 9;
    FmtS3_DXT1_RGBA s3_dxt1_rgba = 10;
    FmtS3_DXT3_RGBA s3_dxt3_rgba = 11;
    FmtS3_DXT5_RGBA s3_dxt5_rgba = 12;
    FmtASTC astc = 13;
    FmtRGTC1_BC4_R_U8_NORM rgtc1_bc4_r_u8_norm = 14;
    FmtRGTC1_BC4_R_S8_NORM rgtc1_bc4_r_s8_norm = 15;
    FmtRGTC2_BC5_RG_U8_NORM rgtc2_bc5_rg_u8_norm = 16;
    FmtRGTC2_BC5_RG_S8_NORM rgtc2_bc5_rg_s8_norm = 17;
  }
}

message FmtUncompressed {
  stream.Format format = 1;
}
message FmtPNG {}
message FmtATC_RGB_AMD {}
message FmtATC_RGBA_EXPLICIT_ALPHA_AMD {}
message FmtATC_RGBA_INTERPOLATED_ALPHA_AMD {}

message FmtETC1_RGB_U8_NORM {}

message FmtETC2 {
  enum ColorMode {
    R = 0;
    R_SIGNED = 1;
    RG = 2;
    RG_SIGNED = 3;
    RGB = 4;
    SRGB = 5;
  }

  enum AlphaMode {
    ALPHA_NONE = 0;
    ALPHA_8BIT = 1;
    ALPHA_1BIT = 2;
  }

  ColorMode colorMode = 1;
  AlphaMode alphaMode = 2;
}

message FmtS3_DXT1_RGB {}
message FmtS3_DXT1_RGBA {}
message FmtS3_DXT3_RGBA {}
message FmtS3_DXT5_RGBA {}
message FmtASTC {
  uint32 block_width = 1;
  uint32 block_height = 2;
  bool srgb = 3;
}
message FmtRGTC1_BC4_R_U8_NORM {}
message FmtRGTC1_BC4_R_S8_NORM {}
message FmtRGTC2_BC5_RG_U8_NORM {}
message FmtRGTC2_BC5_RG_S8_NORM {}

// GAPIS internal structure.
message ConvertResolvable {
  ID bytes = 1;
  uint32 width = 2;
  uint32 height = 3;
  uint32 depth = 4;
  Format format_from = 5;
  Format format_to = 6;

  // Number of bytes between rows in the source image. If 0 then rows are
  // contiguous.
  uint32 row_stride_from = 7;
  // Number of bytes between each 2D slice in the source image. If 0 then slices
  // are contiguous.
  uint32 slice_stride_from = 8;
}

// GAPIS internal structure.
message ResizeResolvable {
  ID bytes = 1;
  Format format = 2;
  uint32 src_width = 3;
  uint32 src_height = 4;
  uint32 src_depth = 5;
  uint32 dst_width = 6;
  uint32 dst_height = 7;
  uint32 dst_depth = 8;
}
